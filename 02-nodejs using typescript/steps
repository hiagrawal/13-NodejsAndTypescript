install ts congif file using 'tsc --init'
install package.json file using 'npm init'

install express using 'npm install --save express'
install body-parser package using 'npm install --save body-parser'

Now when we convert app.js to app.ts, we get error in require but typescript does not understand require and for that we can
install 'npm install --save-dev @types/node'

@type allows typescript translations for javascript code 
using this, we can use nodejs specifoic code in typescript file

to make typescript understand and recognize all express methods
install 'npm install --save-dev @types/express'
This will install type definitions for the express library

now to use es6 import feature, we added '"type":"module"' with javascript but with typescript, we get this as it install
with typescript, we can bydefault use import syntax and we should use import syntax cz as we use that we get suggestions 
and method names available and its overloads paramters 

we should also uncomment "moduleResolution": "node" in tsconfig file so that it understands that it is a node application

to use all types provided by body-parser, install its type definitions
so 'npm install --save-dev @types/body-parser'

To test it, we first will have to compile it and convert all typescript to javascript
so run 'tsc' to compile all ts files

and run 'node app.js' to run app js file and start the server
make a note that node only understands js file and not ts file 
and hence we need to run 'node app.js' file and not 'node app.ts' file

and once server is up, we can test all our rest apis uisng Postman

GET: http://localhost:3000
POST: http://localhost:3000/todo and in Body-raw-json- {"text": "My Second Todo"}
PUT: http://localhost:3000/todo/<id> and in Body-raw-json- {"text": "Updated Todo!"}
DELETE: http://localhost:3000/todo/<id>

Using Type Casting
Although our code works fine, but since we are using typescript we can enhance our code using type casting and defining types
for paramters that are supposed to get in our request

since we need to convert out ts code in js code, it is creating a new file for ts file at the same place 
and making our project structure look clumsy and hence we can fix that

we can uncomment  "outDir": "./" in tsconfig file and give path to it as  "outDir": "./dist",
similarly uncomment root directory "rootDir": "./", to "rootDir": "./src" to define where our app file resides

and then run tsc, which will generate js files for all ts files and put it in dist folder

and now run application using 'node dist/app.js'

or add a 'start' script in package.json file to run code then using 'npm start'
"start": "node dist/app.js"

Resources:
you can find a more complex Node TypeScript project/ project setup here:
 https://github.com/Microsoft/TypeScript-Node-Starter#typescript-node-starter